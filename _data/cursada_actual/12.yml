titulo: El día después

descripcion: |
  Repasamos algunos patrones que quedaron en el tintero: _[Template method](https://refactoring.guru/es/design-patterns/template-method)_, _Double dispatch_ y _[Composite](https://refactoring.guru/es/design-patterns/composite)_, con videos y pequeños ejercicios para reforzar.

videos:
  - url: https://youtu.be/kA_WTAXDXJU
    nombre: "Clase en vivo del 26/10"
    descripcion: |
      Comentarios sobre el ejercicio de parcial "Minions", principio _Tell, don't ask_ e intro a _double dispatch_.
  - url: https://www.youtube.com/watch?v=19ZKRU9eubc
    nombre: "Patrón TEMPLATE METHOD en Kotlin: delegando partes del algoritmo en las subclases"
    descripcion: |
      Una resolución posible del peso máximo de "Ventas Aéreas", usando template method.
  - url: https://www.youtube.com/watch?v=6wlfbWTNsXE
    nombre: "Interface VERSUS clase abstracta en Kotlin"
    descripcion: |
      Diferencias, similitudes y cuándo conviene usar cada una.
  - url: https://www.youtube.com/watch?v=lkno-6GJ-ro
    nombre: "Modelando comportamiento con ¿DOUBLE DISPATCH? en Kotlin"
    descripcion: |
      Cómo resolver las tareas de los Minions sin tener que hacer un millón de `if`.
  - url: https://www.youtube.com/watch?v=9I4EwAykVaY
    nombre: "Patrón COMPOSITE en Kotlin: respetando el polimorfismo"
    descripcion: |
      Resolución del rol Capataz del ejercicio "Minions".

entrega:
  fecha: "2020-11-04 23:59"
  ejercicios:
  - name: Seguros (double dispatch)
    repo: obj2-unahur/seguros
    classroom: https://classroom.github.com/g/sRRsfg65
  - name: Tareas (composite)
    repo: obj2-unahur/tareas
    classroom: https://classroom.github.com/g/m7xXm6-J
